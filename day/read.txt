平时想到的一些知识点：
一.浏览器输入一个网址到显示出这个页面的过程：
http://blog.csdn.net/c_liyun/article/details/45273987、

二.浏览器显示一个网页的过程：
http://blog.csdn.net/longeremmy/article/details/8030736

三.什么是前端自动化？
http://www.tuicool.com/articles/fqUby26
比较好的前端自动化的工具是webpack 所以主要还是看这个

四.什么是模块化和组件化？
http://www.cnblogs.com/mfc-itblog/p/5385773.html

五.js模块化中的require.js？ 
解决的是几个js文件之间需要按照确定的依赖关系 采用的是AMD
1.引入require.js
<script src="js/require.js" defer async="true"></script>
2.在主页面中 就是所有文件的入口 main.js
<script src="js/require.js" data-main="js.main"></script>
3.main.js中
require(['moduleA','moduleB','moduleC'],function(modulea,moduleb,modulec){
	//
})
4.在main.js中
require.config({
	paths:{
	"jquery":"lib/jquery.min",
	"underscore":"lib/underscore.min",
	"backbone":"lib/backbone.min"
	}
});
另一种
require.config({
	baseUrl:"lib"
	paths:{
	"jquery":"jquery.min",
	"underscore":"underscore.min",
	"backbone":"backbone.min"
	}
});
5.各个模块的编写：
define(['modle'],function(model){
	/////
})
六.js中的上下文？
上下文与作用域（scope）是不同的概念。Js本身是单线程的，每当有function被执行时，就会产生一个新的上下文，这一上下文会被压入Js的上下文堆栈（context stack）中，function执行结束后则被弹出，因此Js解释器总是在栈顶上下文中执行。
http://blog.rainy.im/2015/07/04/scope-chain-and-prototype-chain-in-js/

七.单页面SPA?
http://www.tuicool.com/articles/BneeAvB















