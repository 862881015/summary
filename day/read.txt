平时想到的一些知识点：
一.浏览器输入一个网址到显示出这个页面的过程：
http://blog.csdn.net/c_liyun/article/details/45273987、

二.浏览器显示一个网页的过程：
http://blog.csdn.net/longeremmy/article/details/8030736

三.什么是前端自动化？
http://www.tuicool.com/articles/fqUby26
比较好的前端自动化的工具是webpack 所以主要还是看这个

四.什么是模块化和组件化？
http://www.cnblogs.com/mfc-itblog/p/5385773.html

五.js模块化中的require.js？ 
解决的是几个js文件之间需要按照确定的依赖关系 采用的是AMD
1.引入require.js
<script src="js/require.js" defer async="true"></script>
2.在主页面中 就是所有文件的入口 main.js
<script src="js/require.js" data-main="js.main"></script>
3.main.js中
require(['moduleA','moduleB','moduleC'],function(modulea,moduleb,modulec){
	//
})
4.在main.js中
require.config({
	paths:{
	"jquery":"lib/jquery.min",
	"underscore":"lib/underscore.min",
	"backbone":"lib/backbone.min"
	}
});
另一种
require.config({
	baseUrl:"lib"
	paths:{
	"jquery":"jquery.min",
	"underscore":"underscore.min",
	"backbone":"backbone.min"
	}
});
5.各个模块的编写：
define(['modle'],function(model){
	/////
})
六.js中的上下文？
上下文与作用域（scope）是不同的概念。Js本身是单线程的，每当有function被执行时，就会产生一个新的上下文，这一上下文会被压入Js的上下文堆栈（context stack）中，function执行结束后则被弹出，因此Js解释器总是在栈顶上下文中执行。
http://blog.rainy.im/2015/07/04/scope-chain-and-prototype-chain-in-js/

七.单页面SPA?
单页面应用就是：就是只有一张web页面的应用，单页面就是加载单个html页面并在用户与应用程序交互的时候动态更新该页面的web应用程序。
单页面应用的优点：
1.用户体验，对于内容的改动不需要加载整个页面
2.数据层和UI的分离，可以重新编写一个原生的移动设备应用程序而不用大动干戈
3.高效，对服务器压力很小，消耗更多的带宽，能够与面向服务的架构更好的结合
单页面的缺点：
1.不利于SEO
2.初次加载耗时增多
3.导航不可用：前进 后退 地址栏等 需要程序进行管理
4.书签，需要程序支持
考虑是否需要用spa的因素：
1.交互体验：不用的应用面对不用的人群，会有不同的交互体验
2.工程代价：大型网站转spa会有很大的代价
3.容错问题：spa所有脚本都加进去，如果出现一个js错误，那么整个网站就有可能都挂掉
4.是否必要：简单呈现内容的网站，没必要用spa
5.是都兼容低版本浏览器：...


八.JSONP的工作原理？
利用<script>没有跨域限制的“漏洞”（历史遗留问题）来达到与第三方通信的目的。当需要通信的时候。本站脚本创建一个<script>元素，地址指向第三方的API我那网址，刑如：
<script src="http://www.example.net/"></script>
并提供一个回调函数来接收函数（函数名可约定，或者通过地址参数传递）。第三方产生的相应为json数据的包装(jsonp)刑如：callback({"name":"123","gender":"male"})















